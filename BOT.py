from env import TOKEN
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import json
import os
#
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#
bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher(bot, storage=MemoryStorage())  # –î–∏—Å–ø–∞—Ç—á–µ—Ä
admin_id = 5208563645
#
#
#
if not os.path.exists("database.json"):
    with open("database.json", "x") as file:
        temp = {"users": []}
        json.dump(temp, file, indent=4)

with open("database.json", "r") as file:
    database = json.load(file)
    database: dict[str, list[dict]]
#
# –Æ–ó–ï–†–ù–ï–ô–ú –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
#
#
# –ö–ù–û–ü–ö–ê –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê –¢–ê–†–ò–§–ê –ò –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò
#
@dp.message_handler(commands=['start'])
async def button(message: types.Message):
    markup = InlineKeyboardMarkup(row_width=2)
    button_rate = InlineKeyboardButton(text="–ü—Ä–∞–π—Å-–ª–∏—Å—Ç",
                                       url="https://docs.google.com/spreadsheets/d/1hqbRithEEBsBCVnOWXWAKvYNkkY4pMiTzIGCQxflW5g/edit#gid=901990233")
    button_feedback = InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="butt_id2")
    button_help = InlineKeyboardButton(text="–ü–æ–º–æ—â—å", callback_data="butt_id3")
    button_info = InlineKeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="butt_id4")
    markup.add(button_rate, button_feedback, button_help, button_info,)
    await bot.send_message(message.chat.id, "üöò–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–º–ø–∞–Ω–∏—è –í–í–ü-–ë–∞–º–ø–µ—Ä.üöò\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
                           reply_markup=markup)

    existing_users = database["users"]
    user_id = message.from_id

    for user in existing_users:
        if user_id == user["id"]:
            break
    else:
        existing_users.append({"id": user_id, "url": message.from_user.url, "username": message.from_user.username})
#
# –û–¢–í–ï–¢ –û–¢ –ù–ê–ñ–ê–¢–ò–Ø –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò
#
@dp.callback_query_handler(lambda c: c.data == "butt_id2")
async def to_query(call: types.callback_query):
    await bot.answer_callback_query(call.id)
    await bot.send_message(call.message.chat.id, "–£–∑–Ω–∞—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await bot.send_message(call.message.chat.id,
                           "–†–∞–±–æ—á–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: +79177655343\nWhatsApp: +79170427776\nTelegram: @kls1337")
    await bot.send_message(call.message.chat.id, "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ —Å 07:00 - 16:00 –ú–°–ö")
#
#–û–¢–í–ï–¢ –û–¢ –ö–ù–û–ü–ö–ò –ü–û–ú–û–©–ò
#
@dp.callback_query_handler(lambda d: d.data == "butt_id3")
async def to_help(call: types.callback_query):
    await bot.send_message(call.message.chat.id, "–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n /help - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞.\n /start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.\n /info - —É–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏\n /availability - —É–∑–Ω–∞—Ç—å –æ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ ")
#
#
#
@dp.callback_query_handler(lambda f: f.data == "butt_id4")
async def to_info(call: types.callback_query):
    await bot.send_message(call.message.chat.id, "–í–í–ü-–±–∞–º–ø–µ—Ä - –∫–æ–º–ø–∞–Ω–∏—è –æ—Å–Ω–æ–≤–∞–Ω–Ω–∞—è –≤ 2020 –≥–æ–¥—É, –∑–∞ 3 –≥–æ–¥–∞ –º—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ–≤–µ—Ä–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.\n–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n " \
                                                             "‚≠êÔ∏è–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µÔ∏è\n ‚≠êÔ∏è–õ—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π Ô∏è\n ‚≠êÔ∏è–ë–æ–ª—å—à–æ–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç\n ‚≠êÔ∏è–ë—ã—Å—Ç—Ä–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏Ô∏è")
#@dp.callback_query_handler(lambda g: g.data == "butt_id5")
#async def to_info(call: types.callback_query):
   #await call.message.delete()


try:
    executor.start_polling(dp)
finally:
    with open("database.json", "w") as file:
        json.dump(database, file, indent=4)
